{"mappings":"ACAA,IAAI,EAAU,CACZ,OAAQ,CACN,CACE,MAAO,GACP,YAAa,IACb,mBAAoB,EACpB,UAAW,GACX,iBAAkB,CACpB,EACD,AACH,EAEA,SAAS,EAAY,CAAC,EACpB,IAAM,EAAS,SAAS,aAAa,CAAC,WAEtC,GAAI,EAAO,UAAU,CAAE,CACrB,IAAM,EAAM,EAAO,UAAU,CAAC,MAM9B,IAAI,IAAM,KAJV,EAAI,SAAS,CAAC,EAAG,EAAG,EAAO,KAAK,CAAE,EAAO,MAAM,EAE/C,EAAI,WAAW,CAAG,QAEC,EAAE,MAAM,EAEzB,IAAK,IAAI,EAAQ,EAAG,EAAQ,IAAK,GAAS,IAAM,EAAM,KAAK,CAAE,CAC3D,EAAI,IAAI,GAER,EAAI,SAAS,CAAC,EAAO,KAAK,CAAG,EAAG,EAAO,MAAM,CAAG,GAChD,EAAI,MAAM,CAAC,AAAC,CAAA,EAAM,gBAAgB,CAAG,IAAM,EAAQ,GAAA,EAAO,KAAK,EAAE,EACjE,EAAI,SAAS,CAAC,EAAG,CAAC,EAAM,SAAS,CAAG,IAAM,EAAO,KAAK,CAAG,GACzD,EAAI,MAAM,CAAC,EAAM,kBAAkB,CAAG,IAAM,KAAK,EAAE,EACnD,EAAI,KAAK,CAAC,EAAM,WAAW,CAAG,IAAK,EAAM,WAAW,CAAG,KAEvD,IAAM,EAAQ,IAAI,OAClB,EAAM,MAAM,CAAC,IAAK,IAClB,EAAM,MAAM,CAAC,GAAI,IACjB,EAAM,MAAM,CAAC,EAAG,KAChB,EAAM,MAAM,CAAC,IAAK,IAElB,EAAI,MAAM,CAAC,GAEX,EAAI,OAAO,EACb,CAGJ,MACE,QAAQ,GAAG,CAAC,qCAEhB,CAGA,AADmB,SAAS,aAAa,CAAC,UAC/B,gBAAgB,CAAC,QAAS,AAAC,IACpC,EAAQ,MAAM,CAAC,EAAE,CAAC,KAAK,CAAG,EAAG,MAAM,CAAC,KAAK,CACzC,EAAY,EACd,GAGA,AADyB,SAAS,aAAa,CAAC,iBAC/B,gBAAgB,CAAC,QAAS,AAAC,IAC1C,EAAQ,MAAM,CAAC,EAAE,CAAC,WAAW,CAAG,EAAG,MAAM,CAAC,KAAK,CAC/C,EAAY,EACd,GAGA,AADgC,SAAS,aAAa,CAAC,wBAC/B,gBAAgB,CAAC,QAAS,AAAC,IACjD,EAAQ,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAG,EAAG,MAAM,CAAC,KAAK,CACtD,EAAY,EACd,GAGA,AADuB,SAAS,aAAa,CAAC,eAC/B,gBAAgB,CAAC,QAAS,AAAC,IACxC,EAAQ,MAAM,CAAC,EAAE,CAAC,SAAS,CAAG,EAAG,MAAM,CAAC,KAAK,CAC7C,EAAY,EACd,GAGA,AAD8B,SAAS,aAAa,CAAC,sBAC/B,gBAAgB,CAAC,QAAS,AAAC,IAC/C,EAAQ,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAG,EAAG,MAAM,CAAC,KAAK,CACpD,EAAY,EACd,GAEA,OAAO,gBAAgB,CAAC,OAAQ,EAAY","sources":["<anon>","src/scripts/script.js"],"sourcesContent":["let mandala = {\n    layers: [\n        {\n            order: 10,\n            patternSize: 100,\n            patternOrientation: 0,\n            layerSize: 50,\n            layerOrientation: 0\n        }\n    ]\n};\nfunction drawMandala(m) {\n    const canvas = document.querySelector(\"#canvas\");\n    if (canvas.getContext) {\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.strokeStyle = \"black\";\n        for (const layer of m.layers)for(let angle = 0; angle < 360; angle += 360 / layer.order){\n            ctx.save();\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            ctx.rotate((layer.layerOrientation / 100 + angle / 180) * Math.PI);\n            ctx.translate(0, -layer.layerSize / 100 * canvas.width / 2);\n            ctx.rotate(layer.patternOrientation / 180 * Math.PI);\n            ctx.scale(layer.patternSize / 100, layer.patternSize / 100);\n            const shape = new Path2D();\n            shape.moveTo(-50, 50);\n            shape.lineTo(50, 50);\n            shape.lineTo(0, -50);\n            shape.lineTo(-50, 50);\n            ctx.stroke(shape);\n            ctx.restore();\n        }\n    } else console.log(\"Browser does not support <canvas>.\");\n}\nconst rangeOrder = document.querySelector(\"#order\");\nrangeOrder.addEventListener(\"input\", (ev)=>{\n    mandala.layers[0].order = ev.target.value;\n    drawMandala(mandala);\n});\nconst rangePatternSize = document.querySelector(\"#pattern-size\");\nrangePatternSize.addEventListener(\"input\", (ev)=>{\n    mandala.layers[0].patternSize = ev.target.value;\n    drawMandala(mandala);\n});\nconst rangePatternOrientation = document.querySelector(\"#pattern-orientation\");\nrangePatternOrientation.addEventListener(\"input\", (ev)=>{\n    mandala.layers[0].patternOrientation = ev.target.value;\n    drawMandala(mandala);\n});\nconst rangeLayerSize = document.querySelector(\"#layer-size\");\nrangeLayerSize.addEventListener(\"input\", (ev)=>{\n    mandala.layers[0].layerSize = ev.target.value;\n    drawMandala(mandala);\n});\nconst rangeLayerOrientation = document.querySelector(\"#layer-orientation\");\nrangeLayerOrientation.addEventListener(\"input\", (ev)=>{\n    mandala.layers[0].layerOrientation = ev.target.value;\n    drawMandala(mandala);\n});\nwindow.addEventListener(\"load\", drawMandala(mandala));\n\n//# sourceMappingURL=index.86646094.js.map\n","let mandala = {\n  layers: [\n    {\n      order: 10,\n      patternSize: 100,\n      patternOrientation: 0,\n      layerSize: 50,\n      layerOrientation: 0\n    }\n  ]\n};\n\nfunction drawMandala(m) {\n  const canvas = document.querySelector(\"#canvas\");\n\n  if (canvas.getContext) {\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.strokeStyle = \"black\";\n\n    for(const layer of m.layers) {\n\n      for (let angle = 0; angle < 360; angle += 360 / layer.order) {\n        ctx.save();\n        \n        ctx.translate(canvas.width / 2, canvas.height / 2);\n        ctx.rotate((layer.layerOrientation / 100 + angle / 180) * Math.PI);\n        ctx.translate(0, -layer.layerSize / 100 * canvas.width / 2);\n        ctx.rotate(layer.patternOrientation / 180 * Math.PI);\n        ctx.scale(layer.patternSize / 100, layer.patternSize / 100);\n\n        const shape = new Path2D();\n        shape.moveTo(-50, 50);\n        shape.lineTo(50, 50);\n        shape.lineTo(0, -50);\n        shape.lineTo(-50, 50);\n\n        ctx.stroke(shape);\n\n        ctx.restore();\n      }\n    }\n\n  } else {\n    console.log(\"Browser does not support <canvas>.\");\n  }\n}\n\nconst rangeOrder = document.querySelector(\"#order\");\nrangeOrder.addEventListener(\"input\", (ev) => {\n  mandala.layers[0].order = ev.target.value;\n  drawMandala(mandala);\n});\n\nconst rangePatternSize = document.querySelector(\"#pattern-size\");\nrangePatternSize.addEventListener(\"input\", (ev) => {\n  mandala.layers[0].patternSize = ev.target.value;\n  drawMandala(mandala);\n});\n\nconst rangePatternOrientation = document.querySelector(\"#pattern-orientation\");\nrangePatternOrientation.addEventListener(\"input\", (ev) => {\n  mandala.layers[0].patternOrientation = ev.target.value;\n  drawMandala(mandala);\n});\n\nconst rangeLayerSize = document.querySelector(\"#layer-size\");\nrangeLayerSize.addEventListener(\"input\", (ev) => {\n  mandala.layers[0].layerSize = ev.target.value;\n  drawMandala(mandala);\n});\n\nconst rangeLayerOrientation = document.querySelector(\"#layer-orientation\");\nrangeLayerOrientation.addEventListener(\"input\", (ev) => {\n  mandala.layers[0].layerOrientation = ev.target.value;\n  drawMandala(mandala);\n});\n\nwindow.addEventListener(\"load\", drawMandala(mandala));"],"names":["mandala","layers","order","patternSize","patternOrientation","layerSize","layerOrientation","drawMandala","m","canvas","document","querySelector","getContext","ctx","layer","clearRect","width","height","strokeStyle","angle","save","translate","rotate","Math","PI","scale","shape","Path2D","moveTo","lineTo","stroke","restore","console","log","rangeOrder","addEventListener","ev","target","value","rangePatternSize","rangePatternOrientation","rangeLayerSize","rangeLayerOrientation","window"],"version":3,"file":"index.86646094.js.map"}