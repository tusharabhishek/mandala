{"mappings":"ACAA,MAAM,EAAO,CACX,MAAO,EACP,UAAW,GACX,KAAM,GACN,YAAa,CACf,EAyEM,EAAS,SAAS,aAAa,CAAC,WAEtC,SAAS,KACP,AA1EF,SAAkB,CAAM,CAAE,CAAI,EAC5B,GAAI,EAAO,UAAU,CAAE,CACrB,IAAM,EAAM,EAAO,UAAU,CAAC,MAE9B,EAAI,SAAS,CAAC,EAAG,EAAG,EAAO,KAAK,CAAE,EAAO,MAAM,EAE/C,IAAM,EAAI,EAAO,KAAK,CAAG,EAEzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,GAAK,EAAK,IAAI,CACnC,EAAI,IAAI,GAER,EAAI,SAAS,CAAC,EAAO,KAAK,CAAG,EAAG,EAAO,MAAM,CAAG,GAEhD,EAAI,SAAS,GAEb,EAAI,WAAW,CAAG,mBAClB,EAAI,GAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAI,KAAK,EAAE,EAE/B,EAAI,SAAS,GAEb,EAAI,MAAM,GAEV,EAAI,OAAO,GAGb,IAAK,IAAI,EAAI,EAAG,EAAI,IAAK,GAAM,IAAO,CAAA,EAAK,KAAK,CAAG,EAAK,SAAQ,AAAR,EAAa,CACnE,IAAM,EAAQ,AAAA,CAAA,EAAK,WAAW,CAAG,CAAA,EAAK,KAAK,EAAE,CAAG,IAEhD,EAAI,IAAI,GAER,EAAI,SAAS,CAAC,EAAO,KAAK,CAAG,EAAG,EAAO,MAAM,CAAG,GAChD,EAAI,MAAM,CAAC,GAEX,EAAI,SAAS,GAEb,EAAI,WAAW,CAAG,mBAClB,EAAI,MAAM,CAAC,EAAG,GACd,EAAI,MAAM,CAAC,EAAG,GAEd,EAAI,SAAS,GAEb,EAAI,MAAM,GAEV,EAAI,OAAO,EACb,CAEA,IAAK,IAAI,EAAI,EAAG,EAAI,IAAK,GAAM,IAAM,EAAK,KAAK,CAAG,CAChD,IAAM,EAAQ,AAAA,CAAA,EAAK,WAAW,CAAG,CAAA,EAAK,KAAK,EAAE,CAAG,IAEhD,EAAI,IAAI,GAER,EAAI,SAAS,CAAC,EAAO,KAAK,CAAG,EAAG,EAAO,MAAM,CAAG,GAChD,EAAI,MAAM,CAAC,GAEX,EAAI,SAAS,GAEb,EAAI,WAAW,CAAG,mBAClB,EAAI,MAAM,CAAC,EAAG,GACd,EAAI,MAAM,CAAC,EAAG,GAEd,EAAI,SAAS,GAEb,EAAI,MAAM,GAEV,EAAI,OAAO,EACb,CACF,MACE,QAAQ,KAAK,CAAC,oCAElB,EAKW,EAAQ,EACnB,CAEA,OAAO,gBAAgB,CAAC,OAAQ,GAGhC,AADwB,SAAS,aAAa,CAAC,6BAC/B,gBAAgB,CAAC,SAAU,AAAC,IAC1C,EAAK,WAAW,CAAG,EAAG,MAAM,CAAC,KAAK,CAClC,GACF","sources":["<anon>","src/scripts/script.js"],"sourcesContent":["const grid = {\n    order: 8,\n    divisions: 12,\n    size: 10,\n    orientation: 0\n};\nfunction drawGrid(canvas, grid) {\n    if (canvas.getContext) {\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        const r = canvas.width / 2;\n        for(let i = 0; i < r; i += grid.size){\n            ctx.save();\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgb(224 224 224)\";\n            ctx.arc(0, 0, i, 0, 2 * Math.PI);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n        for(let t = 0; t < 360; t += 360 / (grid.order * grid.divisions)){\n            const tRad = (grid.orientation + t) * Math.PI / 180;\n            ctx.save();\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            ctx.rotate(tRad);\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgb(224 224 224)\";\n            ctx.moveTo(0, 0);\n            ctx.lineTo(r, 0);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n        for(let t = 0; t < 360; t += 360 / grid.order){\n            const tRad = (grid.orientation + t) * Math.PI / 180;\n            ctx.save();\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            ctx.rotate(tRad);\n            ctx.beginPath();\n            ctx.strokeStyle = \"rgb(128 128 128)\";\n            ctx.moveTo(0, 0);\n            ctx.lineTo(r, 0);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    } else console.error(\"Browser does not support <canvas>\");\n}\nconst canvas = document.querySelector(\"#canvas\");\nfunction draw() {\n    drawGrid(canvas, grid);\n}\nwindow.addEventListener(\"load\", draw);\nconst gridOrientation = document.querySelector(\"#control-grid-orientation\");\ngridOrientation.addEventListener(\"change\", (ev)=>{\n    grid.orientation = ev.target.value;\n    draw();\n});\n\n//# sourceMappingURL=index.a1b2dcf2.js.map\n","const grid = {\n  order: 8,\n  divisions: 12,\n  size: 10,\n  orientation: 0\n};\n\nfunction drawGrid(canvas, grid) {\n  if (canvas.getContext) {\n    const ctx = canvas.getContext('2d');\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const r = canvas.width / 2;\n\n    for (let i = 0; i < r; i += grid.size) {\n      ctx.save();\n\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      \n      ctx.beginPath();\n\n      ctx.strokeStyle = 'rgb(224 224 224)';\n      ctx.arc(0, 0, i, 0, 2 * Math.PI);\n\n      ctx.closePath();\n\n      ctx.stroke();\n\n      ctx.restore();\n    }\n\n    for (let t = 0; t < 360; t += (360 / (grid.order * grid.divisions))) {\n      const tRad = (grid.orientation + t) * Math.PI / 180;\n\n      ctx.save();\n\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.rotate(tRad);\n      \n      ctx.beginPath();\n\n      ctx.strokeStyle = 'rgb(224 224 224)';\n      ctx.moveTo(0, 0);\n      ctx.lineTo(r, 0);\n\n      ctx.closePath();\n\n      ctx.stroke();\n\n      ctx.restore();\n    }\n\n    for (let t = 0; t < 360; t += (360 / grid.order)) {\n      const tRad = (grid.orientation + t) * Math.PI / 180;\n\n      ctx.save();\n\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.rotate(tRad);\n      \n      ctx.beginPath();\n\n      ctx.strokeStyle = 'rgb(128 128 128)';\n      ctx.moveTo(0, 0);\n      ctx.lineTo(r, 0);\n\n      ctx.closePath();\n\n      ctx.stroke();\n\n      ctx.restore();\n    }\n  } else {\n    console.error('Browser does not support <canvas>');\n  }\n}\n\nconst canvas = document.querySelector('#canvas');\n\nfunction draw() {\n  drawGrid(canvas, grid);\n}\n\nwindow.addEventListener('load', draw);\n\nconst gridOrientation = document.querySelector('#control-grid-orientation');\ngridOrientation.addEventListener('change', (ev) => {\n  grid.orientation = ev.target.value;\n  draw();\n});"],"names":["grid","order","divisions","size","orientation","canvas","document","querySelector","draw","drawGrid","getContext","ctx","clearRect","width","height","r","i","save","translate","beginPath","strokeStyle","arc","Math","PI","closePath","stroke","restore","t","tRad","rotate","moveTo","lineTo","console","error","window","addEventListener","gridOrientation","ev","target","value"],"version":3,"file":"index.a1b2dcf2.js.map"}