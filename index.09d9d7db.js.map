{"mappings":"AAAA,MAAM,SAAS;IACb,UAAU;IACV,cAAc;IACd,MAAM;AACR;AAEA,IAAI,SAAS;AACb,MAAM,QAAQ,IAAI;AAClB,MAAM,MAAM,GAAG;IACb,SAAS;AACX;AACA,MAAM,GAAG,GAAG;AAEZ,SAAS,MAAM,MAAM;IACnB,MAAM,UAAU,OAAO,UAAU,CAAC;IAClC,QAAQ,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;AACrD;AAEA,MAAM,OAAO;IACX,UAAU;IACV,WAAW;IACX,WAAW;IACX,aAAa;IAEb,MAAK,MAAM;QACT,MAAM,UAAU,OAAO,UAAU,CAAC;QAClC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG;QAE1B,QAAQ,IAAI;QAEZ,QAAQ,SAAS,CAAC,QAAQ,GAAG,SAAS;QAEtC,0BAA0B;QAC1B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,GAAG,KAAK,IAAI,CAAC,SAAS,CAAE;YAClD,QAAQ,IAAI;YAEZ,QAAQ,WAAW,GAAG,OAAO,IAAI;YAEjC,QAAQ,SAAS;YACjB,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM;YAC9B,QAAQ,SAAS;YACjB,QAAQ,MAAM;YAEd,QAAQ,OAAO;QACjB;QAEA,aAAa;QACb,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,IAAK;YACvD,QAAQ,IAAI;YACZ,QAAQ,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,IAAI,MAAM,IAAK,CAAA,MAAO,CAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,AAAD,CAAC;YAEzF,QAAQ,WAAW,GAAG,OAAO,YAAY;YAEzC,QAAQ,SAAS;YACjB,QAAQ,MAAM,CAAC,GAAG;YAClB,QAAQ,MAAM,CAAC,QAAQ,GAAG;YAC1B,QAAQ,SAAS;YACjB,QAAQ,MAAM;YAEd,QAAQ,OAAO;QACjB;QAEA,aAAa;QACb,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,QAAQ,IAAI;YACZ,QAAQ,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,IAAI,MAAM,IAAK,CAAA,MAAM,IAAI,CAAC,QAAQ,AAAD;YAEtE,QAAQ,WAAW,GAAG,OAAO,QAAQ;YAErC,QAAQ,SAAS;YACjB,QAAQ,MAAM,CAAC,GAAG;YAClB,QAAQ,MAAM,CAAC,QAAQ,GAAG;YAC1B,QAAQ,SAAS;YACjB,QAAQ,MAAM;YAEd,QAAQ,OAAO;QACjB;QAEA,QAAQ,OAAO;IACjB;AACF;AAEA,SAAS,UAAU,MAAM;IACvB,QAAQ,GAAG,CAAC;IAEZ,IAAI,QAAQ;QACV,MAAM,UAAU,OAAO,UAAU,CAAC;QAClC,QAAQ,SAAS,CAAC,OAAO,GAAG;IAC9B;AACF;AAEA,SAAS;IACP,OAAO,qBAAqB,CAAC;IAE7B,MAAM,SAAU,SAAS,aAAa,CAAC;IACvC,MAAM;IAEN,KAAK,IAAI,CAAC;IACV,UAAU;AACZ;AAEA,OAAO,qBAAqB,CAAC;AAE7B,SAAS,MAAM,GAAG;IAAI,OAAO,KAAK,EAAE,GAAG,MAAM;AAAK","sources":["src/scripts/script.js"],"sourcesContent":["const colors = {\n  babyBlue: '#89CFF0',\n  electricBlue: '#7DF9FF',\n  aqua: '#00FFFF',\n};\n\nlet loaded = false;\nconst image = new Image();\nimage.onload = function () {\n  loaded = true;\n};\nimage.src = 'images/sample-primitives/primitive_1.png';\n\nfunction clear(canvas) {\n  const context = canvas.getContext('2d');\n  context.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nconst grid = {\n  symOrder: 8,\n  divisions: 12,\n  radialInc: 10,\n  orientation: 0,\n\n  draw(canvas) {\n    const context = canvas.getContext('2d');\n    const { width, height } = canvas;\n\n    context.save();\n\n    context.translate(width / 2, height / 2);\n    \n    // draw concentric circles\n    for (let i = 0; i < width / 2; i += this.radialInc) {\n      context.save();\n\n      context.strokeStyle = colors.aqua;\n\n      context.beginPath();\n      context.arc(0, 0, i, 0, toRad(360));\n      context.closePath();\n      context.stroke();\n      \n      context.restore();\n    }\n    \n    // minor axes\n    for (let i = 0; i < this.symOrder * this.divisions; i++) {\n      context.save();\n      context.rotate(toRad(this.orientation) + toRad(i * (360 / (this.symOrder * this.divisions))));\n\n      context.strokeStyle = colors.electricBlue;\n      \n      context.beginPath();\n      context.moveTo(0, 0);\n      context.lineTo(width / 2, 0);\n      context.closePath();\n      context.stroke();\n\n      context.restore();\n    }\n\n    // major axes\n    for (let i = 0; i < this.symOrder; i++) {\n      context.save();\n      context.rotate(toRad(this.orientation) + toRad(i * (360 / this.symOrder)));\n\n      context.strokeStyle = colors.babyBlue;\n      \n      context.beginPath();\n      context.moveTo(0, 0);\n      context.lineTo(width / 2, 0);\n      context.closePath();\n      context.stroke();\n\n      context.restore();\n    }\n    \n    context.restore();\n  }\n};\n\nfunction drawImage(canvas) {\n  console.log(image);\n  \n  if (loaded) {\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n  }\n}\n\nfunction drawLoop() {\n  window.requestAnimationFrame(drawLoop);\n\n  const canvas  = document.querySelector('#main-canvas');\n  clear(canvas);\n\n  grid.draw(canvas);\n  drawImage(canvas);\n}\n\nwindow.requestAnimationFrame(drawLoop);\n\nfunction toRad(deg) { return Math.PI * deg / 180; }"],"names":[],"version":3,"file":"index.09d9d7db.js.map","sourceRoot":"/__parcel_source_root/"}